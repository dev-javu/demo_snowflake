name: Validate

# Triggers the action based on branch and path.
on:
  pull_request:
    branches:
      - main
    paths:
      - 'migrations/**'
      - 'terraform/**'
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      migrations: ${{ steps.filter.outputs.migrations }}
      schemas: ${{ steps.filter.outputs.schemas }}
      tables: ${{ steps.filter.outputs.tables }}
      views: ${{ steps.filter.outputs.views }}
      procedures: ${{ steps.filter.outputs.procedures }}
      tasks: ${{ steps.filter.outputs.tasks }}
      terraform: ${{ steps.filter.outputs.terraform }}

    steps:
      - name: Retrieve repository
        uses: actions/checkout@v4

      - name: Detect changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            migrations:
              - 'migrations/**'
            schemas:
              - 'migrations/01_schemas/**'
            tables:
              - 'migrations/02_tables/**'
            views:
              - 'migrations/03_views/**'
            procedures:
              - 'migrations/04_procedures/**'
            tasks:
              - 'migrations/05_tasks/**'
            terraform:
              - 'terraform/**'

  schema-change-job:
    needs: detect-changes
    if: needs.detect-changes.outputs.migrations == 'true'
    runs-on: ubuntu-latest

    env:
      SF_PRIVATE_KEY_B64: ${{ secrets.SF_PRIVATE_KEY_B64 }}
      SNOWFLAKE_PRIVATE_KEY_PASSPHRASE: ${{ secrets.SF_PRIVATE_KEY_PASSPHRASE }}
      SNOWFLAKE_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
      SNOWFLAKE_USERNAME: ${{ secrets.SF_USERNAME }}
      SNOWFLAKE_ROLE: ${{ secrets.SF_ROLE }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SF_WAREHOUSE }}
      SNOWFLAKE_DATABASE: ${{ secrets.SF_DATABASE }}

    steps:
      - name: Retrieve repository
        uses: actions/checkout@v4

      - name: Use Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Prepare private key
        run: |
          echo "$SF_PRIVATE_KEY_B64" | base64 --decode > $RUNNER_TEMP/snowflake_key.p8
          chmod 600 $RUNNER_TEMP/snowflake_key.p8
          echo "SNOWFLAKE_PRIVATE_KEY_PATH=$RUNNER_TEMP/snowflake_key.p8" >> $GITHUB_ENV

      - name: Install schemachange
        run: |
          pip install --upgrade pip
          pip install schemachange==4.0.1

      - name: Create schemachange connection config
        run: |
          cat <<EOF > connections.toml
          [default]
          account = "${{ env.SNOWFLAKE_ACCOUNT }}"
          user = "${{ env.SNOWFLAKE_USERNAME }}"
          role = "${{ env.SNOWFLAKE_ROLE }}"
          warehouse = "${{ env.SNOWFLAKE_WAREHOUSE }}"
          database = "${{ env.SNOWFLAKE_DATABASE }}"
          authenticator = "snowflake_jwt"
          private_key_file = "${{ env.SNOWFLAKE_PRIVATE_KEY_PATH }}"
          private_key_file_pwd = "${{ env.SNOWFLAKE_PRIVATE_KEY_PASSPHRASE }}"
          EOF

      - name: Fix connections.toml permissions
        run: |
          chmod 600 connections.toml
          sudo chown $USER connections.toml || true

      - name: Check connections.toml
        run: |
          echo "Connections config (sanitized):"
          grep -v "private_key_file_pwd" connections.toml

      - name: Execute schemachange for schemas
        if: needs.detect-changes.outputs.schemas == 'true'
        run: |
          schemachange deploy \
            -f $GITHUB_WORKSPACE/migrations/01_schemas \
            -c $SNOWFLAKE_DATABASE.SCHEMACHANGE.CHANGE_HISTORY \
            --create-change-history-table \
            --connections-file $GITHUB_WORKSPACE/connections.toml \
            --connection-name default \
            --verbose \
            --dry-run

      - name: Execute schemachange for tables
        if: needs.detect-changes.outputs.tables == 'true'
        run: |
          schemachange deploy \
            -f $GITHUB_WORKSPACE/migrations/02_tables \
            -c $SNOWFLAKE_DATABASE.SCHEMACHANGE.CHANGE_HISTORY \
            --create-change-history-table \
            --connections-file $GITHUB_WORKSPACE/connections.toml \
            --connection-name default \
            --verbose \
            --dry-run

      - name: Execute schemachange for views
        if: needs.detect-changes.outputs.views == 'true'
        run: |
          schemachange deploy \
            -f $GITHUB_WORKSPACE/migrations/03_views \
            -c $SNOWFLAKE_DATABASE.SCHEMACHANGE.CHANGE_HISTORY \
            --create-change-history-table \
            --connections-file $GITHUB_WORKSPACE/connections.toml \
            --connection-name default \
            --verbose \
            --dry-run

      - name: Execute schemachange for procedures
        if: needs.detect-changes.outputs.procedures == 'true'
        run: |
          schemachange deploy \
            -f $GITHUB_WORKSPACE/migrations/04_procedures \
            -c $SNOWFLAKE_DATABASE.SCHEMACHANGE.CHANGE_HISTORY \
            --create-change-history-table \
            --connections-file $GITHUB_WORKSPACE/connections.toml \
            --connection-name default \
            --verbose \
            --dry-run

      - name: Execute schemachange for tasks
        if: needs.detect-changes.outputs.tasks == 'true'
        run: |
          schemachange deploy \
            -f $GITHUB_WORKSPACE/migrations/05_tasks \
            -c $SNOWFLAKE_DATABASE.SCHEMACHANGE.CHANGE_HISTORY \
            --create-change-history-table \
            --connections-file $GITHUB_WORKSPACE/connections.toml \
            --connection-name default \
            --verbose \
            --dry-run

  terraform-job:
    needs: detect-changes
    if: needs.detect-changes.outputs.terraform == 'true'
    runs-on: ubuntu-latest

    env:
      TF_VAR_admin_user: ${{ secrets.SF_USERNAME }}
      TF_VAR_private_key_passphrase: ${{ secrets.SF_PRIVATE_KEY_PASSPHRASE }}

    steps:
      - name: Retrieve repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Prepare private key for Terraform
        env:
          SF_PRIVATE_KEY_B64: ${{ secrets.SF_PRIVATE_KEY_B64 }}
          TF_VAR_private_key_passphrase: ${{ secrets.SF_PRIVATE_KEY_PASSPHRASE }}
        run: |
          echo "$SF_PRIVATE_KEY_B64" | base64 --decode > $RUNNER_TEMP/snowflake_key.p8
          chmod 600 $RUNNER_TEMP/snowflake_key.p8
          echo "TF_VAR_admin_private_key_path=$RUNNER_TEMP/snowflake_key.p8" >> $GITHUB_ENV

      - name: Terraform fmt
        run: terraform fmt -check
        working-directory: terraform

      - name: Terraform init
        run: terraform init
        working-directory: terraform

      - name: Terraform validate
        run: terraform validate
        working-directory: terraform

      - name: Terraform plan
        run: terraform plan
        working-directory: terraform

      - name: Terraform apply
        run: terraform apply
        working-directory: terraform
